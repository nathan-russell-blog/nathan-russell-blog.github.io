<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: test | Nathan Russell]]></title>
  <link href="http://nathan-russell-blog.github.io/blog/categories/test/atom.xml" rel="self"/>
  <link href="http://nathan-russell-blog.github.io/"/>
  <updated>2015-08-15T12:42:56-04:00</updated>
  <id>http://nathan-russell-blog.github.io/</id>
  <author>
    <name><![CDATA[Nathan Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Code Markdown Test]]></title>
    <link href="http://nathan-russell-blog.github.io/blog/2015/08/09/code-markdown-test/"/>
    <updated>2015-08-09T20:43:51-04:00</updated>
    <id>http://nathan-russell-blog.github.io/blog/2015/08/09/code-markdown-test</id>
    <content type="html"><![CDATA[<pre><code class="bash Bash Markdown ">
#!/bin/bash

SOMEDIRECTORY=$(echo $PWD | sed -re 's/.+(include\/)(.+)/\1/')
echo $SOMEDIRECTORY

echo $(date +'%F %T')
</code></pre>

<pre><code class="c++ C++ Markdown">
#include &lt;tuple&gt;
#include &lt;type_traits&gt;
#include &lt;iostream&gt;

template &lt;typename... Ts&gt;
struct whatever {
public:
  whatever(Ts... ts)
  : data(std::forward&lt;Ts&gt;(ts)...)
  {}

  static constexpr std::size_t arg_count = sizeof...(Ts);
  std::tuple&lt;Ts...&gt; data;

  template &lt;typename... Args&gt;
  inline void print() {
    print_data&lt;Args...&gt;(data);
    std::cout &lt;&lt; std::endl;
  }

private:
  template &lt;std::size_t I = 0, typename... Args&gt;
  inline typename std::enable_if&lt;I == arg_count, void&gt;::type
  print_data(std::tuple&lt;Args...&gt;&amp; tpl) {}

  template &lt;std::size_t I = 0, typename... Args&gt;
  inline typename std::enable_if&lt;I &lt; arg_count, void&gt;::type
  print_data(std::tuple&lt;Args...&gt;&amp; tpl) {
    typedef typename std::tuple_element&lt;I, decltype(tpl)&gt;::type type;
    std::cout &lt;&lt;
      std::get&lt;I&gt;(tpl) &lt;&lt; "\t";
    print_data&lt;I + 1, Args...&gt;(tpl);
  }

};
</code></pre>

<pre><code class="r R Markdown">
foo &lt;- function(x, y) {
  x ** y
}

(data.table::data.table(
  x = rnorm(20),
  y = rpois(20, 3))[,
  z := foo(x, y)])
</code></pre>

<pre><code class="sql SQL Markdown">
SELECT TOP 1 w.*
  ,x.[foo]
  ,x.[bar]
  ,ISNULL(x.[baz], 0.) AS [baz]
FROM [Whatever] w
  OUTER APPLY (
    SELECT TOP 1 [foo]
      ,[bar]
      ,[baz]
    FROM [Something Else]
    WHERE [Timestamp] BETWEEN GETDATE()-5 AND GETDATE()-1
    ORDER BY [Value Field] DESC
  ) x
ORDER BY [Something];
</code></pre>
]]></content>
  </entry>
  
</feed>
