<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: rcpp | Nathan Russell]]></title>
  <link href="http://nathan-russell-blog.github.io/blog/categories/rcpp/atom.xml" rel="self"/>
  <link href="http://nathan-russell-blog.github.io/"/>
  <updated>2015-11-23T07:47:53-05:00</updated>
  <id>http://nathan-russell-blog.github.io/</id>
  <author>
    <name><![CDATA[Nathan Russell]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Rcpp and Expression Templates]]></title>
    <link href="http://nathan-russell-blog.github.io/blog/2015/11/21/rcpp-and-expression-templates/"/>
    <updated>2015-11-21T19:58:22-05:00</updated>
    <id>http://nathan-russell-blog.github.io/blog/2015/11/21/rcpp-and-expression-templates</id>
    <content type="html"><![CDATA[<p><em>Disclaimer: the topic of this post is briefly touched upon in the linked vignette; my aim here is merely to provide yet another
example use case.</em></p>

<p>One of the more notable features of the <a href="https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-introduction.pdf">Rcpp package</a>
is the family of so called &ldquo;sugar expressions&rdquo;, syntactic sugar for common R functions / expressions that can be called from
within C++ code. More information in the <a href="https://cran.r-project.org/web/packages/Rcpp/vignettes/Rcpp-sugar.pdf">dedicated vignette</a>.
If you&rsquo;ve every wondered why these sugar expressions are so delightfully performant, the magic lies in the use of a neat C++
template metaprogramming (TMP) technique known as <a href="https://en.wikipedia.org/wiki/Expression_templates">Expression Templates</a>. If
you are interested in learning more about expression templates, there is a fair bit of literature available online, but for now,
let&rsquo;s jump right into an example. To keep things light, we will this technique to implement the R&rsquo;s <code>as.integer</code>
function - for simplicity we only consider converting <code>numeric</code> vectors to <code>integer</code> vectors.</p>

<hr />

<p>First, a na√Øve C++ implementation:</p>

<p><figure class='code'><figcaption><span> (NaiveCast.cpp)</span> <a href='/downloads/code/cpp/NaiveCast.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;Rcpp.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [[Rcpp::export]]</span>
</span><span class='line'><span class="n">Rcpp</span><span class="o">::</span><span class="n">IntegerVector</span> <span class="n">naive_cast</span><span class="p">(</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">NumericVector</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="n">R_xlen_t</span> <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">,</span> <span class="n">n</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="n">Rcpp</span><span class="o">::</span><span class="n">IntegerVector</span> <span class="n">result</span><span class="p">(</span><span class="n">n</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">for</span> <span class="p">(</span> <span class="p">;</span> <span class="n">i</span> <span class="o">&lt;</span> <span class="n">n</span><span class="p">;</span> <span class="n">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="n">result</span><span class="p">[</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="kt">int</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="k">return</span> <span class="n">result</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>And a quick sanity check:</p>

<p><figure class='code'><figcaption><span> (CheckNaiveCast.R)</span> <a href='/downloads/code/R/CheckNaiveCast.R'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='R'><span class='line'>x <span class="o">&lt;-</span> <span class="m">1.5</span><span class="o">:</span><span class="m">10.5</span>
</span><span class='line'>R<span class="o">&gt;</span> <span class="kp">class</span><span class="p">(</span>x<span class="p">)</span>
</span><span class='line'><span class="c1"># [1] &quot;numeric&quot;</span>
</span><span class='line'>
</span><span class='line'><span class="p">(</span>y <span class="o">&lt;-</span> naive_cast<span class="p">(</span>x<span class="p">))</span>
</span><span class='line'><span class="c1"># [1]  1  2  3  4  5  6  7  8  9 10</span>
</span><span class='line'>R<span class="o">&gt;</span> <span class="kp">class</span><span class="p">(</span>y<span class="p">)</span>
</span><span class='line'><span class="c1"># [1] &quot;integer&quot;</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>Alright, so far so good. Now the sugarized version, which is a bit more involved:</p>

<p><figure class='code'><figcaption><span> (LazyCast.cpp)</span> <a href='/downloads/code/cpp/LazyCast.cpp'>download</a></figcaption>
<div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
</pre></td><td class='code'><pre><code class='cpp'><span class='line'><span class="cp">#include &lt;Rcpp.h&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="kt">int</span> <span class="n">RTYPE</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">NA</span><span class="p">,</span> <span class="k">typename</span> <span class="n">VEC_T</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">class</span> <span class="nc">LazyCastImpl</span>
</span><span class='line'>  <span class="o">:</span> <span class="k">public</span> <span class="n">Rcpp</span><span class="o">::</span><span class="n">VectorBase</span><span class="o">&lt;</span>
</span><span class='line'>      <span class="n">INTSXP</span><span class="p">,</span> <span class="nb">true</span><span class="p">,</span>
</span><span class='line'>      <span class="n">LazyCastImpl</span><span class="o">&lt;</span><span class="n">RTYPE</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">VEC_T</span><span class="o">&gt;</span>
</span><span class='line'><span class="o">&gt;</span> <span class="p">{</span>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">Rcpp</span><span class="o">::</span><span class="n">VectorBase</span><span class="o">&lt;</span><span class="n">RTYPE</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">VEC_T</span><span class="o">&gt;</span> <span class="n">VEC_TYPE</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="n">Rcpp</span><span class="o">::</span><span class="n">Vector</span><span class="o">&lt;</span><span class="n">INTSXP</span><span class="o">&gt;</span> <span class="n">VECTOR</span><span class="p">;</span>
</span><span class='line'>  <span class="k">typedef</span> <span class="k">typename</span> <span class="n">Rcpp</span><span class="o">::</span><span class="n">traits</span><span class="o">::</span><span class="n">storage_type</span><span class="o">&lt;</span><span class="n">INTSXP</span><span class="o">&gt;::</span><span class="n">type</span> <span class="n">result_type</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">private</span><span class="o">:</span>
</span><span class='line'>  <span class="k">const</span> <span class="n">VEC_TYPE</span><span class="o">&amp;</span> <span class="n">vec</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span><span class="o">:</span>
</span><span class='line'>  <span class="n">LazyCastImpl</span><span class="p">(</span><span class="k">const</span> <span class="n">VEC_TYPE</span><span class="o">&amp;</span> <span class="n">vec_</span><span class="p">)</span>
</span><span class='line'>    <span class="o">:</span> <span class="n">vec</span><span class="p">(</span><span class="n">vec_</span><span class="p">.</span><span class="n">get_ref</span><span class="p">())</span> <span class="p">{}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="n">R_xlen_t</span> <span class="n">size</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">vec</span><span class="p">.</span><span class="n">size</span><span class="p">();</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="n">result_type</span> <span class="k">operator</span><span class="p">[](</span><span class="n">R_xlen_t</span> <span class="n">i</span><span class="p">)</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">result_type</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="n">vec</span><span class="p">[</span><span class="n">i</span><span class="p">]);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>  <span class="kr">inline</span> <span class="k">const</span> <span class="n">VECTOR</span><span class="o">&amp;</span> <span class="n">get_ref</span><span class="p">()</span> <span class="k">const</span> <span class="p">{</span>
</span><span class='line'>    <span class="k">return</span> <span class="k">static_cast</span><span class="o">&lt;</span><span class="k">const</span> <span class="n">VECTOR</span><span class="o">&amp;&gt;</span><span class="p">(</span><span class="o">*</span><span class="k">this</span><span class="p">);</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">};</span>
</span><span class='line'>
</span><span class='line'><span class="k">template</span> <span class="o">&lt;</span><span class="kt">int</span> <span class="n">RTYPE</span><span class="p">,</span> <span class="kt">bool</span> <span class="n">NA</span><span class="p">,</span> <span class="k">typename</span> <span class="n">VEC_T</span><span class="o">&gt;</span>
</span><span class='line'><span class="kr">inline</span> <span class="n">LazyCastImpl</span><span class="o">&lt;</span><span class="n">RTYPE</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">VEC_T</span><span class="o">&gt;</span>
</span><span class='line'><span class="n">LazyCast</span><span class="p">(</span><span class="k">const</span> <span class="n">Rcpp</span><span class="o">::</span><span class="n">VectorBase</span><span class="o">&lt;</span><span class="n">RTYPE</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">VEC_T</span><span class="o">&gt;&amp;</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">LazyCastImpl</span><span class="o">&lt;</span><span class="n">RTYPE</span><span class="p">,</span> <span class="n">NA</span><span class="p">,</span> <span class="n">VEC_T</span><span class="o">&gt;</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="c1">// [[Rcpp::export]]</span>
</span><span class='line'><span class="n">Rcpp</span><span class="o">::</span><span class="n">IntegerVector</span> <span class="n">lazy_cast</span><span class="p">(</span><span class="n">Rcpp</span><span class="o">::</span><span class="n">NumericVector</span> <span class="n">x</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">LazyCast</span><span class="p">(</span><span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure></p>

<p>If you are initially put off by this, try to reserve judgement for the time being. Despite the somewhat complex appearance, many
Rcpp sugar functions / expression template operations follow a very similar pattern, so if you are willing to put a
little extra effort into familiarizing
yourself with the basic paradigm, you will have added a <em>very</em> powerful tool to your C++ / Rcpp arsenal.</p>

<p>The above source file essentially consists of three parts:</p>

<ul>
<li><p>the implementation of the action in the form of a template class (<code>LazyCastImpl</code>)</p></li>
<li><p>the templated function (<code>LazyCast</code>) which provides a callable interface
to the implementation class</p></li>
<li><p>the exported function (<code>lazy_cast</code>) which will be called from R</p></li>
</ul>


<p>This last part has nothing to do with expression templates; it&rsquo;s just an implementation detail
specific to this example.</p>

<hr />

<p>Anyways, let&rsquo;s start by focusing on the first part, as this is mainly where the magic happens. For the benefit of
those who may not have spent countless hours reading through <a href="https://github.com/RcppCore/Rcpp/tree/master/inst/include/Rcpp">Rcpp source code</a>,
I&rsquo;ll briefly touch on a few Rcpp-isms in the example above (not necessarily related to the topic at hand).</p>

<ul>
<li>Line 3, <code>template &lt;int RTYPE, bool NA, typename VEC_T&gt;</code></li>
</ul>


<p>You will see this for pretty much every <code>struct</code> / <code>class</code> deriving from <code>Rcpp::VectorBase</code> because (not surprisingly)
that <code>int / bool / typename</code> combo corresponds to the template parameters of the
<a href="https://github.com/RcppCore/Rcpp/blob/master/inst/include/Rcpp/vector/VectorBase.h#L28">VectorBase class</a>.
<code>RTYPE</code> is the integer code representing the <code>SEXPTYPE</code>, e.g. <code>REALSXP</code> (<code>numeric</code>) has an <code>RTYPE</code> of 14,
etc&hellip; A complete list can be found <a href="http://www.biosino.org/R/R-doc/R-ints/SEXPTYPEs.html">here</a>. The other
non-type template parameter, <code>NA</code>, signifies whether or not the base class can contain missing (<code>NA</code>) values.
Finally, the type parameter <code>VEC_T</code>, which is essential to the
<a href="https://en.wikibooks.org/wiki/More_C%2B%2B_Idioms/Curiously_Recurring_Template_Pattern">CRTP</a>
idiom, represents the (non-base) vector type; a templated class itself.</p>

<ul>
<li>Line 12; <code>typedef typename Rcpp::traits::storage_type&lt;INTSXP&gt;::type result_type</code></li>
</ul>


<p>Note that this is unnecessary in our example; I could have just as well written
<code>typedef int result_type</code>. However, typically in such templates, <code>::storage_type&lt; &gt;::type</code> is used to get the equivalent C++
type of an (unknown) integer template parameter (e.g. <code>RTYPE</code>).</p>

<hr />

<p>Moving on, the first thing to notice is the inheritence pattern used - also a manifestation of CRTP - on lines 5 through 8:</p>

<pre><code class="c++">// ... 
public Rcpp::VectorBase&lt; INTSXP, true, LazyCastImpl&lt;RTYPE, NA, VEC_T&gt; &gt;
</code></pre>

<p>Unlike the <code>typedef</code> on line 10 (<code>typedef Rcpp::VectorBase&lt;RTYPE, NA, VEC_T&gt; VEC_TYPE</code>), we inherit from a
base vector with the following composition:</p>

<ol>
<li><p><code>SEXPTYPE</code> is <code>INTSXP</code>: we already know that ultimately our result will be an integer vector.</p></li>
<li><p>the <code>NA</code> non-type parameter is set to <code>true</code>: we need to account for the possibility that our input may
contain missing values, and if so, they should be preserved in the output vector.</p></li>
<li><p>The type parameter is the class itself - <code>LazyCastImpl&lt;RTYPE, NA, VEC_T&gt;</code> - since a key idea of CRTP is
to provide the base class with access to / knowledge of whatever class is deriving from it.</p></li>
</ol>


<p>I&rsquo;ll summarize this with a general (but not definitive) rule-of-thumb regarding the expression template pattern in the
context of Rcpp: <em>when inheriting from the <code>VectorBase</code> class, we set the non-type parameters based on
the desired output object, and we set the type parameter to the derived class itself.</em></p>

<hr />

<p>Next, we consider the <code>typedef</code>s on lines 10 and 11 (line 12 was previously discussed):</p>

<pre><code class="c++">typedef Rcpp::VectorBase&lt;RTYPE, NA, VEC_T&gt; VEC_TYPE;
typedef Rcpp::Vector&lt;INTSXP&gt; VECTOR;
</code></pre>

<p>Here,</p>

<ul>
<li><p><code>VEC_TYPE</code> is a <code>typedef</code> for the <code>VectorBase</code> object that will be passed to our <code>LazyCastImpl</code> constructor, and for which
we will also store a constant-reference-to-member to, e.g. <code>vec</code>.</p></li>
<li><p><code>VECTOR</code> is the output object of our expression (more on this to come). We use a <code>Rcpp::Vector&lt;INTSXP&gt;</code> and not
a <code>VectorBase&lt;...&gt;</code> because the latter
is just a base class and not really suitable for direct manipulation within code.</p></li>
</ul>


<hr />

<p>Now we consider line 15, <code>const VEC_TYPE&amp; vec</code>, in conjunction with our constructor on lines 18 and 19:</p>

<pre><code class="c++">LazyCastImpl(const VEC_TYPE&amp; vec_)
  : vec(vec_.get_ref()) {}
</code></pre>

<p>Since our member <code>vec</code> is a constant reference object, it <strong>must be initialized in the constructor&rsquo;s member initializer list</strong>.
Attempting to initialize such a data member in the body of the constructor or at some later point (e.g. in a member function)
will result in a compiler error. Also, note the manner in which we are initializing <code>vec</code>: <code>vec_.get_ref()</code>. Instead of calling
the <code>VectorBase</code> copy constructor (which is not explicitly defined, but presumably the compiler has generated one to the effect
of <code>VectorBase(const VectorBase&amp; other)</code>), we initialize our member <code>vec</code> based on the <code>get_ref()</code> method - a method which we
also implement in our own class.</p>

<hr />

<p>Finally, we examine lines 21 - 31, the methods of our <code>LazyCastImpl</code> class. First, the <code>size()</code> method on line 21:</p>

<pre><code class="c++ ">inline R_xlen_t size() const {
  return vec.size();
}
</code></pre>

<p>Although we are not directly using this method to accomplish anything, in accordance with CRTP, we must implement it because the parent
class defines its <code>size()</code> method as:</p>

<pre><code class="c++ ">inline R_xlen_t size() const {
  return static_cast&lt;const VECTOR*&gt;(this)-&gt;size();
}
</code></pre>
]]></content>
  </entry>
  
</feed>
